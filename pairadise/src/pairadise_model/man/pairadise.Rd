% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairadise.R
\name{pairadise}
\alias{pairadise}
\title{pairadise}
\usage{
pairadise(my.data, numCluster = 2, sig.level = 0.01, nIter = 100,
  tol = 10^(-2), pseudocount = 0, seed = 12321, equal.variance = FALSE)
}
\arguments{
\item{my.data}{Data frame containing grouped data to be analyzed}

\item{numCluster}{Number of clusters to use for parallel computing.}

\item{sig.level}{Positive number between 0 and 1. Specifies the desired significance level.
Default value is sig.level = 0.01}

\item{nIter}{Positive integer. Specifies the maximum number of iterations of the optimization
algorithm allowed. Default is nIter = 100}

\item{tol}{Positive number. Specifies the tolerance level for terminating the optimization
algorithm, defined as the difference in log-likelihood ratios between iterations. Default
is tol = 10^(-2)}

\item{pseudocount}{Positive number. Specifies a value for a pseudocount added to each
count at the beginning of the analysis. Default is pseudocount = 0}

\item{equal.variance}{Are the group variances assumed equal? Default value is FALSE.}
}
\value{
The function pairadise returns a list containing the following entries:
\item{sig.results.Bonferroni}{Matrix containing the significant exons (after Bonferroni correction at sig.level), their p-values, and test-statistics.}
\item{sig.results.FDR}{Matrix containing the significant exons (after FDR correction using BH at sig.level), their p-values, and test-statistics.}
\item{testStats}{Vector of test statistics for paired analysis.}
\item{raw.pvalues}{Vector of pvalues for each exon/event.}
\item{param.unconstrained}{List of parameter estimates for unconstrained model.}
\item{param.constrained}{List of parameter estimates for constrained model.}
\item{latent.u}{List of parameter estimates of latent variables for unconstrained model.}
\item{latent.c}{List of parameter estimates of latent variables for constrained model.}
\item{nReplicates}{Vector containing the number of valid replicates for each exon in my.data.}
\item{totalIter}{Vector containing total number of iterations required for optimization algorithm.}
\item{exonID}{Character vector containing exonIDs .}
\item{nExon}{Total number of valid exons in my.data.}
\item{I1}{List containing all exon inclusion counts for group 1.}
\item{S1}{List containing all exon skipping counts for group 1.}
\item{I2}{List containing all exon inclusion counts for group 2.}
\item{S2}{List containing all exon skipping counts for group 2.}
}
\description{
Primary function of the PAIRADISE package. Analyzes matched pairs for differences in isoform expression.
Uses parallel processing to speed up computation.
}
\details{
This is the primary function of the PAIRADISE package that implements the PAIRADISE algorithm.
The data frame in my.data should have 7 columns, arranged as follows:
Column 1 contains the ID of the exons/events.
Column 2 contains counts of isoform 1 corresponding to the first group.
Column 3 contains counts of isoform 2 corresponding to the first group.
Column 4 contains counts of isoform 1 corresponding to the second group.
Column 5 contains counts of isoform 2 corresponding to the second group.
Replicates in columns 2-5 should be separated by commas, e.g. 1623,432,6 for three replicates.
Column 6 contains the effective length of isoform 1.
Column 7 contains the effective length of isoform 2.
}
\examples{

#############################
## Example: Simulated data ##
#############################

set.seed(12345)
nExon <- 3  # number of exons

## Organize data into the data frame my.data following the proper formatting:
exonID <- paste("Exon", as.character(seq(1:nExon)))
my.data <- data.frame(matrix(nrow = nExon, ncol = 7))
my.data[,1] <- exonID
my.data[,2] <- c("12,3,5", "2,9,10,6,5,4", "15,17000,20,100")
my.data[,3] <- c("0,1,2", "0,0,4,0,3,2", "2,12,1,1")
my.data[,4] <- c("2,4,5", "12,13,7,7,7,8", "1,6,7,10")
my.data[,5] <- c("0,1,3", "0,0,0,4,3,1", "274,NA,320,5650")
my.data[,6] <- c(3,3,3)
my.data[,7] <- c(1,1,1)

## Store results
results <- pairadise(my.data, numCluster = 4, equal.variance = FALSE)

}
